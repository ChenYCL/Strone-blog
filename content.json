{"meta":{"title":"Strone","subtitle":null,"description":null,"author":"Chen Yuxuan","url":"http://www.lgoweb.com"},"pages":[{"title":"","date":"2017-09-03T10:41:51.857Z","updated":"2017-09-03T10:41:51.842Z","comments":true,"path":"about/index.html","permalink":"http://www.lgoweb.com/about/index.html","excerpt":"","text":"前端工程师坐标：深圳 爱好 音乐 steam,有朋友可以加好友 CN-Robot 美剧:生活大爆炸fans 最近迷上了vps 我决定了还是等有时间做个好看点的简介&nbsp 逃~"}],"posts":[{"title":"hexo快速上手","slug":"hello-world","date":"2017-06-17T16:00:00.000Z","updated":"2017-09-03T09:23:51.609Z","comments":true,"path":"2017/06/18/hello-world/","link":"","permalink":"http://www.lgoweb.com/2017/06/18/hello-world/","excerpt":"","text":"Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.lgoweb.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.lgoweb.com/tags/hexo/"}]},{"title":"Es6中的重点语法摘录","slug":"es6","date":"2017-06-17T16:00:00.000Z","updated":"2017-09-03T07:53:15.093Z","comments":true,"path":"2017/06/18/es6/","link":"","permalink":"http://www.lgoweb.com/2017/06/18/es6/","excerpt":"关于es6中的一些语法知识，以及附带的一些案例","text":"关于es6中的一些语法知识，以及附带的一些案例 原型 123456789101112131415161718192021let drink =&#123; getDrink()&#123; return '水'； &#125;&#125;let fire =&#123; getDrink()&#123; return '火'； &#125;&#125;// 继承drink中的方法let drink2=Object.create(drink); // 继承了drink的属性console.log(drink2.getDrink()); //‘水’console.log(Object.getPrototypeOf(drink2)===drink); // trueObject.setProtypeOf(drink2,fire);console.log(drink2.getDrink()); // '火' super调用原型中的方法1234567891011121314let break=&#123; getD()&#123; return '2' &#125;&#125;let d=&#123; __prop__:break, child()&#123; return super.getD() &#125;&#125;console.log(d); // 2 generator生成器123456789function* chef(foods)&#123; yield 'apple' yield 'eggs'&#125;// 迭代器let wanghao =chef();console.log(wanghao.next()); // appleconsole.log(wanghao.next()); // eggs 生成器中定义的是 循环的等待时12345678910function* chef(foods)&#123; for(var i=0;i&lt;foods.length;i++)&#123; yield foods[i] &#125;&#125;let wanghao=chef(['apple','pear']);console.log(wanghao.next()); // appleconsole.log(wanghao.next()); // pearconsole.log(wanghao.next()); //undefiend class123456789101112class Cher(food)&#123; constructor(food)&#123; this.food=food; &#125; cook()&#123; console.log(this.food); &#125;&#125;let wanghao =new Chef('苹果');wanghao.cook(); // 苹果 get和set方法1234567891011121314151617181920212223class Cher(food)&#123; constructor(food)&#123; this.food=food; this.dish=[]; // 做的菜 &#125; cook()&#123; console.log(this.food); &#125; // 拿取get方法 用get关键字 + 方法名 get menu()&#123; return this.dish; &#125; set menu(dish)&#123; this.dish.push(dish); &#125;&#125;// 创建实例let wanghao=new Chef();console.log(wanghao.menu='胡萝卜 炒肉');console.log(wanghao.menu='排骨汤');console.log(wanghao.menu); // ['胡萝卜 炒肉','排骨汤'] static 静态方法 不需要实例化就可以使用的方法 用类名.方法名 就行了12345678910111213141516171819class Cher(food)&#123; constructor(food)&#123; this.food=food; this.dish=[]; // 做的菜 &#125; static cook()&#123; console.log(this.food); &#125; // 拿取get方法 用get关键字 + 方法名 get menu()&#123; return this.dish; &#125; set menu(dish)&#123; this.dish.push(dish); &#125;&#125; Cher.cook('香蕉'); // 香蕉 extends 继承属性1234567891011121314151617181920class Person&#123; constructor(name,birthday)&#123; this.name=name; this.birthday=birthday; &#125; intro() &#123; return `$&#123;this.name&#125;,$&#123;this.birthday&#125;` &#125;&#125;class Chef extends Person&#123; // 如果继承中的属性或方法需要使用 ,用super调用 constructor(name,birthday)&#123; super(name,birthday) &#125;&#125;let wanghao =new Chef('wanghao','1984-02-06');console.log(wanghao.intro()); // wanghao,1984-02-06 Set集合类似,不能重复定义，里面的值不能包含重复的东西，如果是重复的东西，集合中只会有一个，可用这点查重判断 要添加可用 add方法,要获取集合的长度 使用 size,判读某个值是否在里面用has 方法 delete 删除，循环处理用forEach(),清空用 clear（）方法 123456789101112131415let desserts=new Set('苹果香蕉梨');desserts.add('水')console.log(desserts); // &#123;'苹','果','香','蕉','梨','水'&#125;;console.log(desserts.size); // 6console.log(desserts.has('苹'); // true// 要删除其中的项，用delete方法desserts.delete('苹');console.log(desserts); // &#123;'果','香','蕉','梨','水'&#125;// 循环处理desserts.forEach(dessert=&gt;&#123; console.log(dessert);&#125;)// 输出 苹...desserts.clear(); Map对象添加内容使用的是set方法，形式xx.set(key,value); 拿取Map对象中的值，使用get方法 循环forEach((value,key)=&gt;{console.log(${key},${value})}) 清空使用clear let food=new Map(); let fruit={},cook=function(){},desset='甜点'; food.set(fruit,'苹果'); food.set(cook,'pear'); console.log(food);","categories":[{"name":"js","slug":"js","permalink":"http://www.lgoweb.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://www.lgoweb.com/tags/js/"},{"name":"es6","slug":"es6","permalink":"http://www.lgoweb.com/tags/es6/"}]}]}