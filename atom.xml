<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Strone</title>
  
  
  <link href="/Strone-blog/atom.xml" rel="self"/>
  
  <link href="http://chenycl.github.io/Strone-blog/"/>
  <updated>2018-01-25T02:56:18.042Z</updated>
  <id>http://chenycl.github.io/Strone-blog/</id>
  
  <author>
    <name>ChenYCL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python</title>
    <link href="http://chenycl.github.io/Strone-blog/2018/01/25/python/"/>
    <id>http://chenycl.github.io/Strone-blog/2018/01/25/python/</id>
    <published>2018-01-25T02:55:43.000Z</published>
    <updated>2018-01-25T02:56:18.042Z</updated>
    
    <content type="html"><![CDATA[<p>待整理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待整理&lt;/p&gt;

      
    
    </summary>
    
      <category term="python" scheme="http://chenycl.github.io/Strone-blog/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://chenycl.github.io/Strone-blog/2018/01/25/linux/"/>
    <id>http://chenycl.github.io/Strone-blog/2018/01/25/linux/</id>
    <published>2018-01-25T02:55:37.000Z</published>
    <updated>2018-01-25T02:56:18.042Z</updated>
    
    <content type="html"><![CDATA[<p>待整理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待整理&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://chenycl.github.io/Strone-blog/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo到Github样式不出来</title>
    <link href="http://chenycl.github.io/Strone-blog/2017/09/04/hexo%E6%A0%B7%E5%BC%8F%E4%B8%8A%E4%BC%A0github%E9%94%99%E4%B9%B1/"/>
    <id>http://chenycl.github.io/Strone-blog/2017/09/04/hexo样式上传github错乱/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2018-01-25T02:51:34.948Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo生成博客部署到GitHub，解决样式不加载方法<br><a id="more"></a></p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>真心要吐槽，心累，做了四个主题前前后后改，😭结果两个到最后部署到vps上谷歌浏览器样式乱了，心情是这样的。</p><div style="border:1px solid darkgrey;border-radius:15px"><br><div align="center"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcwky_A67cXeXbJjFpsdCuwO57QhqnxH2q2WsdQuVYYTkfyP5E" width="800" height="600" alt="草泥马"></div></div><h2 id="前期流程"><a href="#前期流程" class="headerlink" title="前期流程"></a>前期流程</h2><p>这里只简单过一下。<br>首先从官网Hexo 生成一个官方主题为lanscape的博客，配置的话一个<code>theme</code>文件里面有个<strong><code>_config.yml</code></strong>和root根目录下方一个<code>**_config.yml**</code>，相关配置可看我github这个目录下的配置源文件，绝大部分都有中文备注，或者官方传送门<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>,需要了解的code 流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//默任务 node和npm环境已装好</span><br><span class="line">npm install hexo-cli -g  //  脚手架工具</span><br><span class="line"></span><br><span class="line">hexo init blog-demo  </span><br><span class="line"></span><br><span class="line">cd blog-demo</span><br><span class="line"></span><br><span class="line">npm i // 安装依赖</span><br><span class="line"></span><br><span class="line">hexo s  // 服务开启，可在默认4000端口看到效果</span><br></pre></td></tr></table></figure></p><p>当前是官方的landscape主题，从官方拉取不同主题后，进行相关配置，可参考我的。</p><hr><h2 id="本期目标"><a href="#本期目标" class="headerlink" title="本期目标"></a>本期目标</h2><p>当传到GitHub上面的gh-pages,,打开网页出现网页加载不上的尴尬场景，尝试修改配置文件找了很多靠谱点的是<br>这种配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url:  http://chenycl.github.io/Strone-blog</span><br><span class="line">root: /Strone-blog</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p><p>然而本机测试，样式有，当相关图片去没有了</p><h3 id="折腾了许久，差点没用cdn了"><a href="#折腾了许久，差点没用cdn了" class="headerlink" title="折腾了许久，差点没用cdn了"></a>折腾了许久，差点没用cdn了</h3><p>最终修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url:  http://chenycl.github.io</span><br><span class="line">root: /Strone-blog</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p><div style="color:red">大吉大利，通过！</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Hexo生成博客部署到GitHub，解决样式不加载方法&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://chenycl.github.io/Strone-blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://chenycl.github.io/Strone-blog/tags/Hexo/"/>
    
      <category term="Github" scheme="http://chenycl.github.io/Strone-blog/tags/Github/"/>
    
      <category term="部署" scheme="http://chenycl.github.io/Strone-blog/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Es6中的重点语法摘录</title>
    <link href="http://chenycl.github.io/Strone-blog/2017/06/18/es6-1/"/>
    <id>http://chenycl.github.io/Strone-blog/2017/06/18/es6-1/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2018-01-25T02:51:34.948Z</updated>
    
    <content type="html"><![CDATA[<p>关于es6中的一些语法知识，以及附带的一些案例<br><a id="more"></a></p><p>原型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> drink =&#123;</span><br><span class="line">    <span class="function"><span class="title">getDrink</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'水'</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> fire =&#123;</span><br><span class="line">    <span class="function"><span class="title">getDrink</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'火'</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 继承drink中的方法</span><br><span class="line"><span class="built_in">let</span> drink2=Object.create(drink);  // 继承了drink的属性</span><br><span class="line">console.log(drink2.getDrink()); //‘水’</span><br><span class="line"></span><br><span class="line">console.log(Object.getPrototypeOf(drink2)===drink); // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Object.setProtypeOf(drink2,fire);</span><br><span class="line">console.log(drink2.getDrink()); // <span class="string">'火'</span></span><br></pre></td></tr></table></figure><h3 id="super调用原型中的方法"><a href="#super调用原型中的方法" class="headerlink" title="super调用原型中的方法"></a>super调用原型中的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">break</span>=&#123;</span><br><span class="line">    <span class="function"><span class="title">getD</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'2'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> d=&#123;</span><br><span class="line">    __prop__:<span class="built_in">break</span>,</span><br><span class="line">    <span class="function"><span class="title">child</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> super.getD()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(d);   // 2</span><br></pre></td></tr></table></figure><h3 id="generator生成器"><a href="#generator生成器" class="headerlink" title="generator生成器"></a>generator生成器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* chef(foods)&#123;</span><br><span class="line">    yield <span class="string">'apple'</span></span><br><span class="line">    yield <span class="string">'eggs'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 迭代器</span><br><span class="line"><span class="built_in">let</span> wanghao =chef();</span><br><span class="line">console.log(wanghao.next());  // apple</span><br><span class="line">console.log(wanghao.next());    // eggs</span><br></pre></td></tr></table></figure><h3 id="生成器中定义的是-循环的等待时"><a href="#生成器中定义的是-循环的等待时" class="headerlink" title="生成器中定义的是 循环的等待时"></a>生成器中定义的是 循环的等待时</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* chef(foods)&#123;</span><br><span class="line">    <span class="keyword">for</span>(var i=0;i&lt;foods.length;i++)&#123;</span><br><span class="line">        yield foods[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> wanghao=chef([<span class="string">'apple'</span>,<span class="string">'pear'</span>]);</span><br><span class="line">console.log(wanghao.next());  // apple</span><br><span class="line">console.log(wanghao.next());    // pear</span><br><span class="line">console.log(wanghao.next());  //undefiend</span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Cher(food)&#123;</span><br><span class="line">    constructor(food)&#123;</span><br><span class="line">        this.food=food;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">cook</span></span>()&#123;</span><br><span class="line">        console.log(this.food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> wanghao =new Chef(<span class="string">'苹果'</span>);</span><br><span class="line">wanghao.cook();  //   苹果</span><br></pre></td></tr></table></figure><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Cher(food)&#123;</span><br><span class="line">    constructor(food)&#123;</span><br><span class="line">        this.food=food;</span><br><span class="line">        this.dish=[]; // 做的菜</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">cook</span></span>()&#123;</span><br><span class="line">        console.log(this.food);</span><br><span class="line">    &#125;</span><br><span class="line">    //  拿取get方法  用get关键字 + 方法名</span><br><span class="line">    get <span class="function"><span class="title">menu</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.dish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span> menu(dish)&#123;</span><br><span class="line">        this.dish.push(dish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建实例</span><br><span class="line"><span class="built_in">let</span> wanghao=new Chef();</span><br><span class="line">console.log(wanghao.menu=<span class="string">'胡萝卜 炒肉'</span>);</span><br><span class="line">console.log(wanghao.menu=<span class="string">'排骨汤'</span>);</span><br><span class="line">console.log(wanghao.menu);   //  [<span class="string">'胡萝卜 炒肉'</span>,<span class="string">'排骨汤'</span>]</span><br></pre></td></tr></table></figure><h3 id="static-静态方法-不需要实例化就可以使用的方法-用类名-方法名-就行了"><a href="#static-静态方法-不需要实例化就可以使用的方法-用类名-方法名-就行了" class="headerlink" title="static 静态方法  不需要实例化就可以使用的方法 用类名.方法名  就行了"></a>static 静态方法  不需要实例化就可以使用的方法 用类名.方法名  就行了</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Cher(food)&#123;</span><br><span class="line">    constructor(food)&#123;</span><br><span class="line">        this.food=food;</span><br><span class="line">        this.dish=[]; // 做的菜</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   static <span class="function"><span class="title">cook</span></span>()&#123;</span><br><span class="line">        console.log(this.food);</span><br><span class="line">    &#125;</span><br><span class="line">    //  拿取get方法  用get关键字 + 方法名</span><br><span class="line">    get <span class="function"><span class="title">menu</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.dish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span> menu(dish)&#123;</span><br><span class="line">        this.dish.push(dish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> Cher.cook(<span class="string">'香蕉'</span>);  //  香蕉</span><br></pre></td></tr></table></figure><h3 id="extends-继承属性"><a href="#extends-继承属性" class="headerlink" title="extends  继承属性"></a>extends  继承属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,birthday)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.birthday=birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">intro</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> `<span class="variable">$&#123;this.name&#125;</span>,<span class="variable">$&#123;this.birthday&#125;</span>`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Chef extends Person&#123;</span><br><span class="line">    // 如果继承中的属性或方法需要使用  ,用super调用</span><br><span class="line">    constructor(name,birthday)&#123;</span><br><span class="line">        super(name,birthday)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> wanghao =new Chef(<span class="string">'wanghao'</span>,<span class="string">'1984-02-06'</span>);</span><br><span class="line">console.log(wanghao.intro());  // wanghao,1984-02-06</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合类似,不能重复定义，里面的值不能包含重复的东西，如果是重复的东西，集合中只会有一个，可用这点查重判断 要添加可用 add方法,要获取集合的长度 使用 size,判读某个值是否在里面用has 方法 delete 删除，循环处理用forEach(),清空用 clear（）方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> desserts=new Set(<span class="string">'苹果香蕉梨'</span>);</span><br><span class="line">desserts.add(<span class="string">'水'</span>)</span><br><span class="line">console.log(desserts); // &#123;<span class="string">'苹'</span>,<span class="string">'果'</span>,<span class="string">'香'</span>,<span class="string">'蕉'</span>,<span class="string">'梨'</span>,<span class="string">'水'</span>&#125;;</span><br><span class="line">console.log(desserts.size); // 6</span><br><span class="line">console.log(desserts.has(<span class="string">'苹'</span>);  // <span class="literal">true</span></span><br><span class="line">//   要删除其中的项，用delete方法</span><br><span class="line">desserts.delete(<span class="string">'苹'</span>);</span><br><span class="line">console.log(desserts); // &#123;<span class="string">'果'</span>,<span class="string">'香'</span>,<span class="string">'蕉'</span>,<span class="string">'梨'</span>,<span class="string">'水'</span>&#125;</span><br><span class="line"></span><br><span class="line">// 循环处理</span><br><span class="line">desserts.forEach(dessert=&gt;&#123;</span><br><span class="line">    console.log(dessert);</span><br><span class="line">&#125;)</span><br><span class="line">// 输出 苹...</span><br><span class="line">desserts.clear();</span><br></pre></td></tr></table></figure><h2 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a>Map对象</h2><p>添加内容使用的是set方法，形式xx.set(key,value); 拿取Map对象中的值，使用get方法  循环forEach((value,key)=&gt;{console.log(<code>${key},${value}</code>)})  清空使用clear</p><pre><code class="bash"><span class="built_in">let</span> food=new Map();<span class="built_in">let</span> fruit={},cook=<span class="function"><span class="title">function</span></span>(){},desset=<span class="string">'甜点'</span>;food.set(fruit,<span class="string">'苹果'</span>);food.set(cook,<span class="string">'pear'</span>);console.log(food);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于es6中的一些语法知识，以及附带的一些案例&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://chenycl.github.io/Strone-blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://chenycl.github.io/Strone-blog/tags/js/"/>
    
      <category term="es6" scheme="http://chenycl.github.io/Strone-blog/tags/es6/"/>
    
  </entry>
  
</feed>
